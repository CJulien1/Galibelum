<?php
/**
 * ActivityRepository File Doc Comment
 *
 * PHP version 7.1
 *
 * @category ActivityRepository
 * @package  Repository
 * @author   WildCodeSchool <contact@wildcodeschool.fr>
 */
namespace AppBundle\Repository;

use \Doctrine\ORM\EntityRepository;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @category ActivityRepository
 * @package  Repository
 * @author   WildCodeSchool <contact@wildcodeschool.fr>
 */
class ActivityRepository extends EntityRepository
{
    /**
     * Search activities according to user's search
     *
     * @param String    $name Activity name
     * @param String    $type Activity Type
     * @param \DateTime $date Ending date
     *
     * @return mixed
     */
    public function search(string $name, string $type, \DateTime $date)
    {
        if (!$name && $type == "0") {
            return $this->_searchAll($date);
        }

        return $this->_searchByName($name, $type, $date);
    }

    /**
     * Search activities according to user's search without name
     *
     * @param \DateTime $date Ending date
     *
     * @return mixed
     */
    private function _searchAll(\DateTime $date)
    {
        // If user is searching without selected input,
        // just search all activites with offers > date now
        $query = $this->createQueryBuilder('act')
            ->INNERJOIN('act.organizationActivities', 'org')
            ->INNERJOIN('act.activities', 'off')
            ->SELECT('act, org, off')
            ->WHERE('off.date >= :date')
            ->setParameter('date', $date)
            ->GROUPBY('off')
            ->ORDERBY('act.creationDate');

        return $query->getQuery()->getResult();
    }

    /**
     * Search activities according to user's search with a name
     *
     * @param String    $name Activity name
     * @param String    $type Activity Type
     * @param \DateTime $date Ending date
     *
     * @return mixed
     */
    private function _searchByName(string $name, string $type, \DateTime $date)
    {
        // If user is searching with a name and a valid type,
        // just search all activites or organization with the selected name/type
        // and with offers > date now
        $query = $this->createQueryBuilder('act')
            ->INNERJOIN('act.organizationActivities', 'org')
            ->INNERJOIN('act.activities', 'off')
            ->SELECT('act, org, off')
            ->WHERE('act.name LIKE :name')
            ->ORWHERE('org.name LIKE :name')
            ->setParameter('name', '%' . $name . '%');
        if ($type == "Activité de streaming"
            || $type == "Equipe eSport"
            || $type == "Évènement eSport"
        ) {
            $query
                ->ANDWHERE('act.type LIKE :type')
                ->setParameter('type', '%' . $type . '%');
        }
        $query->ANDWHERE('off.date >= :date')
            ->setParameter('date', $date)
            ->GROUPBY('off')
            ->ORDERBY('act.creationDate');

        return $query->getQuery()->getResult();
    }
}