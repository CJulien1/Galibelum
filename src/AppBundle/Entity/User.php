<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use FOS\UserBundle\Model\User as BaseUser;

/**
 * User
 *
 * @ORM\Table(name="`user`")
 * @ORM\Entity(repositoryClass="AppBundle\Repository\UserRepository")
 */
class User extends BaseUser
{
    /*
     * Relationship Mapping Metadata
     */
    /**
     * @ORM\OneToOne(targetEntity="AppBundle\Entity\Organization", inversedBy="user")
     * @ORM\JoinColumn(nullable=true)
     */
    private $organization;

    /*
     * Autogenerated methods / variables
     */
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     *
     * @ORM\Column(name="firstName", type="string", length=32)
     *
     * @Assert\NotBlank(
     *     message = "Veuillez saisir votre prénom"
     * )
     * @Assert\Length(
     *     min = 2,
     *     max = 32,
     *     minMessage = "Votre nom doit contenir au mmoins {{ limit }} caractères",
     *     maxMessage = "Votre nom ne peut pas contenir plus de {{ limit }} caractères"
     * )
     */
    private $firstName;

    /**
     * @var string
     *
     * @ORM\Column(name="lastName", type="string", length=32)
     *
     * @Assert\NotBlank(
     *     message = "Veuillez saisir votre nom"
     * )
     * @Assert\Length(
     *     min = 2,
     *     max = 32,
     *     minMessage = "Votre nom doit contenir au mmoins {{ limit }} caractères",
     *     maxMessage = "Votre nom ne peut pas contenir plus de {{ limit }} caractères"
     * )
     */
    private $lastName;

    /**
     * @var string
     *
     * @ORM\Column(name="phoneNumber", type="string", length=32)
     *
     * * @Assert\Type("string")
     * @Assert\NotBlank(
     *     message = "Veuillez saisir un numéro de téléphone"
     * )
     * @Assert\Length(
     *     min = 9,
     *     max = 32,
     *     exactMessage = "Veuillez saisir un numéro de téléphone valide"
     * )
     * @Assert\Regex(
     *     pattern = "/^(0|\+33)[1-9]([-. ]?[0-9]{2}){4}$/",
     *     message = "Veuillez saisir un numéro de téléphone valide"
     *)
     */
    private $phoneNumber;

    /**
     * @var bool
     *
     * @ORM\Column(name="cgu", type="boolean")
     */
    private $cgu;

    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set organization
     *
     * @param \AppBundle\Entity\Organization $organization
     *
     * @return User
     */
    public function setOrganization(Organization $organization)
    {
        $this->organization = $organization;

        return $this;
    }

    /**
     * Get organization
     *
     * @return \AppBundle\Entity\Organization
     */
    public function getOrganization()
    {
        return $this->organization;
    }

    public function __construct()
    {
        parent::__construct();
        // your own logic
    }

    /**
     * Set firstName.
     *
     * @param string $firstName
     *
     * @return User
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;

        return $this;
    }

    /**
     * Get firstName.
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * Set lastName.
     *
     * @param string $lastName
     *
     * @return User
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;

        return $this;
    }

    /**
     * Get lastName.
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * Set phoneNumber.
     *
     * @param string $phoneNumber
     *
     * @return User
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->phoneNumber = $phoneNumber;

        return $this;
    }

    /**
     * Get phoneNumber.
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->phoneNumber;
    }

    /**
     * Set email.
     *
     * @param string $email
     *
     * @return User
     */
    public function setEmail($email)
    {
        $email = is_null($email) ? '' : $email;
        parent::setEmail($email);
        $this->setUsername($email);

        return $this;
    }


    /**
     * Set cgu.
     *
     * @param bool $cgu
     *
     * @return User
     */
    public function setCgu($cgu)
    {
        $this->cgu = $cgu;

        return $this;
    }

    /**
     * Get cgu.
     *
     * @return bool
     */
    public function getCgu()
    {
        return $this->cgu;
    }
}
